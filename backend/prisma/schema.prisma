generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id          String      @id @default(cuid())
  email       String      @unique
  firstName   String?
  lastName    String?
  accountType String      @default("SHOPPER")
  password    String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  products    Product[]
  orders      Order[]
  OrderItems  OrderItem[]
  Cart        Cart?
}

// Add amount for products available
// 
model Product {
  id          String       @id @default(cuid())
  name        String
  description String
  price       Float
  imageUrl    String
  category    String
  tags        ProductTag[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  sellerId    String
  Seller      User         @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  orderItems  OrderItem[]
  CartItem    CartItem[]
}

model Cart {
  id        String     @id @default(cuid())
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CartItem {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  quantity     Int
  productUrl   String
  productName  String
  productPrice Float

  cartId    String
  productId String  @unique
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
}

model ProductTag {
  id        String  @id @default(cuid())
  name      String
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Order {
  id          String      @id @default(cuid())
  status      String      @default("PENDING")
  totalAmount Float
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  shopperId   String
  Shopper     User        @relation(fields: [shopperId], references: [id], onDelete: Cascade)
  orderItems  OrderItem[]
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  productId String
  sellerId  String
  quantity  Int
  price     Float
  status    String  @default("PENDING")
  // Relations
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade) // Reference to Order
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade) // Product ordered
  seller    User    @relation(fields: [sellerId], references: [id], onDelete: Cascade) // Seller of the product
}

// enum AccountType {
//   SHOPPER
//   SELLER
//   ADMIN
// }
// enum CategoryType {
//   TABLE
//   CHAIR
//   COVER
// }
// enum OrderStatus {
//   PENDING
//   COMPLETED
//   CANCELLED
// }
// enum OrderItemStatus {
//   PENDING
//   SHIPPED
//   DELIVERED
//   CANCELLED
// }
